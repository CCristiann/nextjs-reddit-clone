generator client {
  provider = "prisma-client-js"
}


datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum VoteType {
  UP
  DOWN
}
model User {
  id                String         @id @default(auto()) @map("_id") @db.ObjectId
  externalId        String         @unique
  name              String?
  imageUrl          String      
  email             String         @unique 
  username          String?        @unique
  createdSubreddits Subreddit[]    @relation("CreatedBy")
  subscriptions     Subscription[]
  votes             Vote[]
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  
  Post        Post[]
  Comment     Comment[]
  CommentVote CommentVote[]
}

model Subreddit {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String   @unique
  description String?
  coverImage  String?
  image       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  posts       Post[]

  creatorId   String?        @db.ObjectId
  Creator     User?          @relation("CreatedBy", fields: [creatorId], references: [id])
  subscribers Subscription[]
}

model Subscription {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  user        User      @relation(fields: [userId], references: [id])
  userId      String    @db.ObjectId
  subreddit   Subreddit @relation(fields: [subredditId], references: [id])
  subredditId String    @db.ObjectId
  createdAt   DateTime  @default(now())
}

model Post {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  content     Json?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  author      User      @relation(fields: [authorId], references: [id])
  authorId    String    @db.ObjectId
  subreddit   Subreddit @relation(fields: [subredditId], references: [id])
  subredditId String    @db.ObjectId
  comments    Comment[]
  votes       Vote[]
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  content   Json
  createdAt DateTime @default(now())
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String   @db.ObjectId
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String   @db.ObjectId

  replyToId String?   @db.ObjectId
  replyTo   Comment?  @relation("ReplyTo", fields: [replyToId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replies   Comment[] @relation("ReplyTo")

  votes     CommentVote[]
  commentId String?
}

model Vote {
  id     String   @id @default(auto()) @map("_id") @db.ObjectId
  user   User     @relation(fields: [userId], references: [id])
  userId String   @db.ObjectId
  post   Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId String   @db.ObjectId
  type   VoteType
}

model CommentVote {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId
  comment   Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId String   @db.ObjectId
  type      VoteType
}
